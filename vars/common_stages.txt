<p>
   The common stages file contains helpers/methods that are to be used as stages across all pipelines.
   You can leverage the helpers/methods as such:
</p>
<p></p>
<pre>stage ('Preflight') {
   common_stages.startSlack("${slackNotifyChannel}")
   common_stages.preflight("${slackNotifyChannel}")
}</pre>
<p>
   The following is a general list of helpers/methods that are available.
</p>
<dl class="slack-vars">
   <dt>preflight()</dt>
   <dd style="margin: 0 0 1em 0">This method, which should be wrapped with a <code>stage</code> block, sets the job properties. As of this writing, the two job properties it is setting is defining the amount of artifacts to keep and disabling concurrency. The method expects one input: <code>slackNotifyChannel</code>. <code>slackNotifyChannel</code> is the channel name where you want to send the Slack notification if it fails (the method is wrapped in a try/catch). If a channel is not specified it should default to the channel configured in the global settings.</dd>
   <dt>startSlack()</dt>
   <dd style="margin: 0 0 1em 0">This method, which should be wrapped with a <code>stage</code> block, notifies via Slack that the job has started. This method is usually accompanied with <code>preflight()</code> in the same stage (usually the first stage). As of this writing, this method calls <code>common_helpers.notifySlackStart()</code> in the common_helpers file. The method expects one input: <code>slackNotifyChannel</code>. <code>slackNotifyChannel</code> is the channel name where you want to send the Slack notification if it fails (the method is wrapped in a try/catch). If a channel is not specified it should default to the channel configured in the global settings.</dd>
   <dt>startDiscord()</dt>
   <dd style="margin: 0 0 1em 0">TODO</dd>
   <dt>notifyEmail()</dt>
   <dd style="margin: 0 0 1em 0">This method, which should be wrapped with a <code>stage</code> block, notifies via email that the job has ended. This method is usually accompanied with <code>notifySlack()</code> in the same stage (usually the last stage). As of this writing, this method calls <code>emailext</code> defined in General Settings of Jenkins. Further properties are set there too. The method expects two inputs: <code>slackNotifyChannel</code> and <code>emailRecp</code>. <code>slackNotifyChannel</code> is the channel name where you want to send the Slack notification if it fails (the method is wrapped in a try/catch). If a channel is not specified it should default to the channel configured in the global settings. <code>emailRecp</code> is users that will receive the email notification comma-seperated.</dd>
   <dt>notifySlack()</dt>
   <dd style="margin: 0 0 1em 0">This method, which should be wrapped with a <code>stage</code> block, notifies via Slack that the job has ended. This method is usually accompanied with <code>notifyEmail()</code> in the same stage (usually the last stage). As of this writing, this method calls <code>common_helpers.notifySlackSuccess()</code> in the common_helpers file. The method expects one input: <code>slackNotifyChannel</code>. <code>slackNotifyChannel</code> is the channel name where you want to send the Slack notification if it fails (the method is wrapped in a try/catch). If a channel is not specified it should default to the channel configured in the global settings.</dd>
   <dt>notifyDiscord()</dt>
   <dd style="margin: 0 0 1em 0">TODO</dd>
   <dt>startMCS()</dt>
   <dd style="margin: 0 0 1em 0">This method, which should be wrapped with a <code>stage</code> block, is the startup sequence to start Minecraft. As of this writing, this method runs through various logic to determine if the instance is online or offline, if the drive is mounted or unmounted, and if the screen (java) is enabled or disabled. The method expects five inputs: <code>gInstance</code>, <code>gZone</code>, <code>gServiceAcct</code>, <code>gProject</code>, and <code>slackNotifyChannel</code>. <code>gInstance</code> is the defined Minecraft instance name in GCP. <code>gZone</code> is the defined zone where the Minecraft instance lives in GCP. <code>gServiceAcct</code> is the defined service account which interacts with the Minecraft instance on GCP. <code>gProject</code> is the defined project name for the Minecraft instance in GCP. <code>slackNotifyChannel</code> is the channel name where you want to send the Slack notification if it fails (the method is wrapped in a try/catch). If a channel is not specified it should default to the channel configured in the global settings.</dd>
   <dt>stopMCS()</dt>
   <dd style="margin: 0 0 1em 0">TODO</dd>
   <dt>verifyMCSOffline()</dt>
   <dd style="margin: 0 0 1em 0">TODO</dd>
</dl>